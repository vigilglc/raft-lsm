// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_rpc.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RaftState int32

const (
	RaftState_Follower     RaftState = 0
	RaftState_Candidate    RaftState = 1
	RaftState_Leader       RaftState = 2
	RaftState_PreCandidate RaftState = 3
)

var RaftState_name = map[int32]string{
	0: "Follower",
	1: "Candidate",
	2: "Leader",
	3: "PreCandidate",
}

var RaftState_value = map[string]int32{
	"Follower":     0,
	"Candidate":    1,
	"Leader":       2,
	"PreCandidate": 3,
}

func (x RaftState) String() string {
	return proto.EnumName(RaftState_name, int32(x))
}

func (RaftState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{0}
}

type ProgressState int32

const (
	ProgressState_Probe     ProgressState = 0
	ProgressState_Replicate ProgressState = 1
	ProgressState_Snapshot  ProgressState = 2
)

var ProgressState_name = map[int32]string{
	0: "Probe",
	1: "Replicate",
	2: "Snapshot",
}

var ProgressState_value = map[string]int32{
	"Probe":     0,
	"Replicate": 1,
	"Snapshot":  2,
}

func (x ProgressState) String() string {
	return proto.EnumName(ProgressState_name, int32(x))
}

func (ProgressState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{1}
}

type StatusRequest struct {
	Linearizable bool `protobuf:"varint,255,opt,name=linearizable,proto3" json:"linearizable,omitempty"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{0}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (m *StatusRequest) GetLinearizable() bool {
	if m != nil {
		return m.Linearizable
	}
	return false
}

type RaftProgress struct {
	NodeID       uint64        `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	MatchIndex   uint64        `protobuf:"varint,2,opt,name=matchIndex,proto3" json:"matchIndex,omitempty"`
	NextIndex    uint64        `protobuf:"varint,3,opt,name=nextIndex,proto3" json:"nextIndex,omitempty"`
	State        ProgressState `protobuf:"varint,4,opt,name=state,proto3,enum=api.ProgressState" json:"state,omitempty"`
	RecentActive bool          `protobuf:"varint,5,opt,name=recentActive,proto3" json:"recentActive,omitempty"`
	IsLearner    bool          `protobuf:"varint,6,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (m *RaftProgress) Reset()         { *m = RaftProgress{} }
func (m *RaftProgress) String() string { return proto.CompactTextString(m) }
func (*RaftProgress) ProtoMessage()    {}
func (*RaftProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{1}
}
func (m *RaftProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftProgress.Merge(m, src)
}
func (m *RaftProgress) XXX_Size() int {
	return m.Size()
}
func (m *RaftProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftProgress.DiscardUnknown(m)
}

var xxx_messageInfo_RaftProgress proto.InternalMessageInfo

func (m *RaftProgress) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *RaftProgress) GetMatchIndex() uint64 {
	if m != nil {
		return m.MatchIndex
	}
	return 0
}

func (m *RaftProgress) GetNextIndex() uint64 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

func (m *RaftProgress) GetState() ProgressState {
	if m != nil {
		return m.State
	}
	return ProgressState_Probe
}

func (m *RaftProgress) GetRecentActive() bool {
	if m != nil {
		return m.RecentActive
	}
	return false
}

func (m *RaftProgress) GetIsLearner() bool {
	if m != nil {
		return m.IsLearner
	}
	return false
}

type StatusResponse struct {
	NodeID         uint64          `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	RaftState      RaftState       `protobuf:"varint,2,opt,name=raftState,proto3,enum=api.RaftState" json:"raftState,omitempty"`
	Term           uint64          `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Lead           uint64          `protobuf:"varint,4,opt,name=lead,proto3" json:"lead,omitempty"`
	AppliedIndex   uint64          `protobuf:"varint,5,opt,name=appliedIndex,proto3" json:"appliedIndex,omitempty"`
	CommittedIndex uint64          `protobuf:"varint,6,opt,name=committedIndex,proto3" json:"committedIndex,omitempty"`
	Progresses     []*RaftProgress `protobuf:"bytes,12,rep,name=progresses,proto3" json:"progresses,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{2}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *StatusResponse) GetRaftState() RaftState {
	if m != nil {
		return m.RaftState
	}
	return RaftState_Follower
}

func (m *StatusResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *StatusResponse) GetLead() uint64 {
	if m != nil {
		return m.Lead
	}
	return 0
}

func (m *StatusResponse) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *StatusResponse) GetCommittedIndex() uint64 {
	if m != nil {
		return m.CommittedIndex
	}
	return 0
}

func (m *StatusResponse) GetProgresses() []*RaftProgress {
	if m != nil {
		return m.Progresses
	}
	return nil
}

type TransferLeaderRequest struct {
	TransfereeID uint64 `protobuf:"varint,1,opt,name=transfereeID,proto3" json:"transfereeID,omitempty"`
}

func (m *TransferLeaderRequest) Reset()         { *m = TransferLeaderRequest{} }
func (m *TransferLeaderRequest) String() string { return proto.CompactTextString(m) }
func (*TransferLeaderRequest) ProtoMessage()    {}
func (*TransferLeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{3}
}
func (m *TransferLeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLeaderRequest.Merge(m, src)
}
func (m *TransferLeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransferLeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLeaderRequest proto.InternalMessageInfo

func (m *TransferLeaderRequest) GetTransfereeID() uint64 {
	if m != nil {
		return m.TransfereeID
	}
	return 0
}

type TransferLeaderResponse struct {
}

func (m *TransferLeaderResponse) Reset()         { *m = TransferLeaderResponse{} }
func (m *TransferLeaderResponse) String() string { return proto.CompactTextString(m) }
func (*TransferLeaderResponse) ProtoMessage()    {}
func (*TransferLeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0bd0c682ba16bf51, []int{4}
}
func (m *TransferLeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferLeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferLeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferLeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferLeaderResponse.Merge(m, src)
}
func (m *TransferLeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransferLeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferLeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferLeaderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("api.RaftState", RaftState_name, RaftState_value)
	proto.RegisterEnum("api.ProgressState", ProgressState_name, ProgressState_value)
	proto.RegisterType((*StatusRequest)(nil), "api.StatusRequest")
	proto.RegisterType((*RaftProgress)(nil), "api.RaftProgress")
	proto.RegisterType((*StatusResponse)(nil), "api.StatusResponse")
	proto.RegisterType((*TransferLeaderRequest)(nil), "api.TransferLeaderRequest")
	proto.RegisterType((*TransferLeaderResponse)(nil), "api.TransferLeaderResponse")
}

func init() { proto.RegisterFile("raft_rpc.proto", fileDescriptor_0bd0c682ba16bf51) }

var fileDescriptor_0bd0c682ba16bf51 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x8b, 0xdb, 0x3c,
	0x18, 0x8c, 0xf3, 0x61, 0x92, 0x67, 0x1d, 0x93, 0x57, 0x2f, 0x5d, 0x4c, 0x5a, 0x4c, 0x70, 0xa1,
	0x84, 0xa5, 0xcd, 0xb2, 0x69, 0xa1, 0x87, 0x9e, 0xfa, 0xc1, 0x42, 0x60, 0x0f, 0xc1, 0xdb, 0x7b,
	0x51, 0xec, 0x27, 0x89, 0xc0, 0xb1, 0x54, 0x49, 0xd9, 0x2e, 0xfd, 0x0b, 0xbd, 0xf4, 0x67, 0xf5,
	0x98, 0x63, 0x8f, 0x25, 0xf9, 0x1d, 0xa5, 0xc5, 0x52, 0xbc, 0x89, 0x97, 0xed, 0x4d, 0x9a, 0x19,
	0xc9, 0x33, 0xa3, 0xc7, 0xe0, 0x4b, 0x3a, 0xd7, 0x9f, 0xa4, 0x48, 0x46, 0x42, 0x72, 0xcd, 0x49,
	0x83, 0x0a, 0xd6, 0x7f, 0xb1, 0x60, 0x7a, 0xb9, 0x9e, 0x8d, 0x12, 0xbe, 0x3a, 0x5f, 0xf0, 0x05,
	0x3f, 0x37, 0xdc, 0x6c, 0x3d, 0x37, 0x3b, 0xb3, 0x31, 0x2b, 0x7b, 0x26, 0x7a, 0x05, 0xdd, 0x6b,
	0x4d, 0xf5, 0x5a, 0xc5, 0xf8, 0x79, 0x8d, 0x4a, 0x93, 0xa7, 0xe0, 0x65, 0x2c, 0x47, 0x2a, 0xd9,
	0x57, 0x3a, 0xcb, 0x30, 0xf8, 0xe3, 0x0c, 0x9c, 0x61, 0x3b, 0xae, 0x80, 0xd1, 0xc6, 0x01, 0x2f,
	0xa6, 0x73, 0x3d, 0x95, 0x7c, 0x21, 0x51, 0x29, 0x72, 0x0a, 0x6e, 0xce, 0x53, 0x9c, 0x7c, 0x08,
	0x0a, 0x79, 0x33, 0xde, 0xef, 0x48, 0x08, 0xb0, 0xa2, 0x3a, 0x59, 0x4e, 0xf2, 0x14, 0x6f, 0x83,
	0xba, 0xe1, 0x8e, 0x10, 0xf2, 0x04, 0x3a, 0x39, 0xde, 0x6a, 0x4b, 0x37, 0x0c, 0x7d, 0x00, 0xc8,
	0x10, 0x5a, 0x4a, 0x53, 0x8d, 0x41, 0x73, 0xe0, 0x0c, 0xfd, 0x31, 0x19, 0x51, 0xc1, 0x46, 0xe5,
	0x37, 0x0b, 0xdb, 0x18, 0x5b, 0x01, 0x89, 0xc0, 0x93, 0x98, 0x60, 0xae, 0xdf, 0x26, 0x9a, 0xdd,
	0x60, 0xd0, 0xb2, 0xa6, 0x8f, 0xb1, 0xe2, 0x5b, 0x4c, 0x5d, 0x21, 0x95, 0x39, 0xca, 0xc0, 0x35,
	0x82, 0x03, 0x10, 0xfd, 0x76, 0xc0, 0x2f, 0x9b, 0x50, 0x82, 0xe7, 0x0a, 0xff, 0x19, 0xea, 0x39,
	0x74, 0x8a, 0xe6, 0x8d, 0x01, 0x93, 0xc9, 0x1f, 0xfb, 0xc6, 0x5a, 0x5c, 0xa2, 0xf1, 0x41, 0x40,
	0x08, 0x34, 0x35, 0xca, 0xd5, 0x3e, 0x9d, 0x59, 0x17, 0x58, 0x86, 0x34, 0x35, 0xb9, 0x9a, 0xb1,
	0x59, 0x17, 0x11, 0xa8, 0x10, 0x19, 0xc3, 0xd4, 0xb6, 0xd1, 0x32, 0x5c, 0x05, 0x23, 0xcf, 0xc0,
	0x4f, 0xf8, 0x6a, 0xc5, 0xb4, 0x2e, 0x55, 0xae, 0x51, 0xdd, 0x43, 0xc9, 0x05, 0x80, 0xd8, 0xd7,
	0x84, 0x2a, 0xf0, 0x06, 0x8d, 0xe1, 0xc9, 0xf8, 0xbf, 0x3b, 0x8b, 0x65, 0x83, 0xf1, 0x91, 0x28,
	0x7a, 0x03, 0x8f, 0x3e, 0x4a, 0x9a, 0xab, 0x39, 0xca, 0x2b, 0xa4, 0x29, 0xca, 0x72, 0x20, 0x22,
	0xf0, 0xf4, 0x9e, 0xc0, 0x43, 0x17, 0x15, 0x2c, 0x0a, 0xe0, 0xf4, 0xfe, 0x61, 0xdb, 0xe1, 0xd9,
	0x25, 0x74, 0xee, 0x5a, 0x21, 0x1e, 0xb4, 0x2f, 0x79, 0x96, 0xf1, 0x2f, 0x28, 0x7b, 0x35, 0xd2,
	0x85, 0xce, 0x7b, 0x9a, 0xa7, 0x2c, 0xa5, 0x1a, 0x7b, 0x0e, 0x01, 0x70, 0xed, 0xd9, 0x5e, 0x9d,
	0xf4, 0xc0, 0x9b, 0x4a, 0x3c, 0xb0, 0x8d, 0xb3, 0xd7, 0xd0, 0xad, 0x3c, 0x3c, 0xe9, 0x40, 0x6b,
	0x2a, 0xf9, 0x0c, 0xed, 0x45, 0x31, 0x8a, 0x8c, 0x25, 0xf6, 0x22, 0x0f, 0xda, 0xd7, 0x39, 0x15,
	0x6a, 0xc9, 0x75, 0xaf, 0x3e, 0xfe, 0xe6, 0xc0, 0x89, 0x71, 0x80, 0xf2, 0x86, 0x25, 0x48, 0x2e,
	0xc0, 0xb5, 0xcf, 0x4c, 0xec, 0x38, 0x55, 0xa6, 0xbf, 0xff, 0x7f, 0x05, 0xdb, 0xcf, 0xc1, 0x04,
	0xfc, 0x6a, 0x3a, 0xd2, 0x37, 0xb2, 0x07, 0xfb, 0xea, 0x3f, 0x7e, 0x90, 0xb3, 0x57, 0xbd, 0x0b,
	0x7e, 0x6c, 0x43, 0x67, 0xb3, 0x0d, 0x9d, 0x5f, 0xdb, 0xd0, 0xf9, 0xbe, 0x0b, 0x6b, 0x9b, 0x5d,
	0x58, 0xfb, 0xb9, 0x0b, 0x6b, 0x33, 0xd7, 0xfc, 0x8f, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x61, 0x49, 0x7e, 0xd5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftServiceClient is the client API for RaftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftServiceClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	TransferLeader(ctx context.Context, in *TransferLeaderRequest, opts ...grpc.CallOption) (*TransferLeaderResponse, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.RaftService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) TransferLeader(ctx context.Context, in *TransferLeaderRequest, opts ...grpc.CallOption) (*TransferLeaderResponse, error) {
	out := new(TransferLeaderResponse)
	err := c.cc.Invoke(ctx, "/api.RaftService/TransferLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServiceServer is the server API for RaftService service.
type RaftServiceServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	TransferLeader(context.Context, *TransferLeaderRequest) (*TransferLeaderResponse, error)
}

// UnimplementedRaftServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServiceServer struct {
}

func (*UnimplementedRaftServiceServer) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedRaftServiceServer) TransferLeader(ctx context.Context, req *TransferLeaderRequest) (*TransferLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeader not implemented")
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RaftService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_TransferLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).TransferLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RaftService/TransferLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).TransferLeader(ctx, req.(*TransferLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _RaftService_Status_Handler,
		},
		{
			MethodName: "TransferLeader",
			Handler:    _RaftService_TransferLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft_rpc.proto",
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Linearizable {
		i--
		if m.Linearizable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xf8
	}
	return len(dAtA) - i, nil
}

func (m *RaftProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLearner {
		i--
		if m.IsLearner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.RecentActive {
		i--
		if m.RecentActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.NextIndex != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.NextIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.MatchIndex != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.MatchIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Progresses) > 0 {
		for iNdEx := len(m.Progresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Progresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaftRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.CommittedIndex != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.CommittedIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.AppliedIndex != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.AppliedIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.Lead != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.Lead))
		i--
		dAtA[i] = 0x20
	}
	if m.Term != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x18
	}
	if m.RaftState != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.RaftState))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferLeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TransfereeID != 0 {
		i = encodeVarintRaftRpc(dAtA, i, uint64(m.TransfereeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferLeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRaftRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaftRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Linearizable {
		n += 3
	}
	return n
}

func (m *RaftProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftRpc(uint64(m.NodeID))
	}
	if m.MatchIndex != 0 {
		n += 1 + sovRaftRpc(uint64(m.MatchIndex))
	}
	if m.NextIndex != 0 {
		n += 1 + sovRaftRpc(uint64(m.NextIndex))
	}
	if m.State != 0 {
		n += 1 + sovRaftRpc(uint64(m.State))
	}
	if m.RecentActive {
		n += 2
	}
	if m.IsLearner {
		n += 2
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRaftRpc(uint64(m.NodeID))
	}
	if m.RaftState != 0 {
		n += 1 + sovRaftRpc(uint64(m.RaftState))
	}
	if m.Term != 0 {
		n += 1 + sovRaftRpc(uint64(m.Term))
	}
	if m.Lead != 0 {
		n += 1 + sovRaftRpc(uint64(m.Lead))
	}
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftRpc(uint64(m.AppliedIndex))
	}
	if m.CommittedIndex != 0 {
		n += 1 + sovRaftRpc(uint64(m.CommittedIndex))
	}
	if len(m.Progresses) > 0 {
		for _, e := range m.Progresses {
			l = e.Size()
			n += 1 + l + sovRaftRpc(uint64(l))
		}
	}
	return n
}

func (m *TransferLeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransfereeID != 0 {
		n += 1 + sovRaftRpc(uint64(m.TransfereeID))
	}
	return n
}

func (m *TransferLeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRaftRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaftRpc(x uint64) (n int) {
	return sovRaftRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 255:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linearizable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Linearizable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchIndex", wireType)
			}
			m.MatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ProgressState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecentActive = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLearner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLearner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftState", wireType)
			}
			m.RaftState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftState |= RaftState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lead", wireType)
			}
			m.Lead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lead |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedIndex", wireType)
			}
			m.CommittedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progresses = append(m.Progresses, &RaftProgress{})
			if err := m.Progresses[len(m.Progresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfereeID", wireType)
			}
			m.TransfereeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransfereeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaftRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaftRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaftRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaftRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaftRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaftRpc = fmt.Errorf("proto: unexpected end of group")
)
